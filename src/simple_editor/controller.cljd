(ns simple-editor.controller
  (:require 
   ["package:flutter/material.dart" :as m]
   ["package:flutter/services.dart" :as services]
   ["package:flutter_inappwebview/flutter_inappwebview.dart" :as webview]))

(def options
  (atom
   {:process-input-html true
    :process-new-line-as-br true
    :process-output-html true}))

(defn eval-javascript 
  [^webview/InAppWebViewController controller source]
  (if (or (nil? controller) (await (.isLoading controller)))
    (throw (Exception "HTML editor is still loading, please wait")))
  (await
   (.evaluateJavascript
    controller
    .source source)))

(defn clear-focus
  []
  (-> services/SystemChannels
      .textInput
      (.invokeMethod "TextInput.hide")))

(defn disable
  [^webview/InAppWebViewController controller]
  (eval-javascript controller 
                   "quilleditor.enable(false);"))

(defn enable
  [^webview/InAppWebViewController controller]
  (eval-javascript controller
                   "quilleditor.enable(ture);"))

;; history
(defn undo 
  [^webview/InAppWebViewController controller]
  (eval-javascript controller
                   "quilleditor.history.undo();"))

(defn redo 
  [^webview/InAppWebViewController controller]
  (eval-javascript controller
                   "quilleditor.history.redo();"))

;; text
(defn clear
  [^webview/InAppWebViewController controller]
  (eval-javascript controller
                   "quilleditor.history.redo();"))

(defn set-format
  [^webview/InAppWebViewController controller f v]
  ;; [controller f v]
  (eval-javascript
   controller
   (str "setFormat('" f "', " v ");")))

(defn inapp-format-parser
  [^webview/InAppWebViewController controller]
  (eval-javascript
   controller
   "
            function formatParser(format) {
              var formatMap = {};
              formatMap['bold'] = format['bold'];
              formatMap['italic'] = format['italic'];
              formatMap['underline'] = format['underline'];
              formatMap['strike'] = format['strike'];
              formatMap['blockqoute'] = format['blockqoute'];
              formatMap['background'] = format['background'];
              formatMap['code-block'] = format['code-block'];
              formatMap['indent'] = format['indent'];
              formatMap['direction'] = format['direction'];
              formatMap['size'] = format['size'];
              formatMap['header'] = format['header'];
              formatMap['color'] = format['color'];
              formatMap['font'] = format['font'];
              formatMap['align'] = format['align'];
              formatMap['list'] = format['list'];
              formatMap['image'] = format['image'];
              formatMap['video'] = format['video'];
              formatMap['clean'] = format['clean'];
              formatMap['link'] = format['link'];
              window.flutter_inappwebview.callHandler('onFormatChange', JSON.stringify(formatMap));
            }
   "))

(defn inapp-on-range-content
  [^webview/InAppWebViewController controller]
  (eval-javascript
   controller
   "
            function onRangeChanged() { 
              try {
                var range = quilleditor.getSelection(true);
                if(range != null) {
                  if(range.length == 0) {
                    var format = quilleditor.getFormat();
                    formatParser(format);
                  } else {
                    var format = quilleditor.getFormat(range.index, range.length);
                    formatParser(format);
                  }
                } else {
                  console.log('Cursor not in the editor');
                }
              } catch(e) {
              ///  console.log(e);
              }
            }
   "))

(defn inapp-init-set-format
  [^webview/InAppWebViewController controller]
  (eval-javascript
   controller
   "
            function setFormat(format, value) {
              if(format == 'clean') {
                var range = quilleditor.getSelection(true);
                if(range) {
                  if(range.length == 0) {
                    quilleditor.removeFormat(range.index, quilleditor.root.innerHTML.length);
                  } else {
                    quilleditor.removeFormat(range.index, range.length);
                  }
                } else {
                  quilleditor.format('clean');
                }
              } else {
                quilleditor.format(format, value);
              }
              return '';
            } 
   "))