(ns simple-editor.widgets.editor-widget
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/services.dart" :as services]
   ["package:flutter_inappwebview/flutter_inappwebview.dart" :as webview]
   [cljd.flutter.alpha2 :as f]
   ["dart:async" :as a]
   [simple-editor.controller :as controll]
   [simple-editor.widgets.toolbar :as toolbar]))

(defn editor-widget
  [{:keys [controller
           callbacks
           plugins
           editor-options
           toolbar-options
           other-options]}]
  (let [controller (atom nil)]
    (f/widget
     :context ctx
     :let [file-path "assets/editor.html"
           width  (-> m/MediaQuery (.of ctx) .-size .-width)
           doc-width (or (:width other-options) (- width 100))]
     (m/GestureDetector
      .onTap (fn []
               (-> services/SystemChannels
                   .textInput
                   (.invokeMethod "TextInput.hide"))
               nil))
     (m/Container
      .width doc-width
      .decoration (:decoration other-options))
     (m/Row
      .children
      [(toolbar/widget
        controller
        {:toolbar-item-width 50
         :dropdown-button-width 40
                      ;;  :dropdown-button-height 140
         :dropdown-style-height 140
         :grid-view-vertical-spacing 5
         :grid-view-horizontal-spacing 5
         :render-separator-widget true} {})
       (m/Expanded
        .child
        (webview/InAppWebView
         .initialFile file-path
         .onWebViewCreated (fn [^webview/InAppWebViewController inapp-controller]
                             (reset! controller inapp-controller)
                             (dart:core/print "init controller !!!")
                             (.addJavaScriptHandler
                              inapp-controller
                              .handlerName "FormatSettings"
                              .callback (fn [e]
                                          (let [json (get e 0)]
                                            (print json)
                                            (when (not= (-> controller .toolbar) nil)
                                              (-> controller .toolbar (.updateToolbar json))))))

                             (.addJavaScriptHandler
                              inapp-controller
                              .handlerName "onChangeContent"
                              .callback (fn [contents]
                                    ;;  (dart:core/print "in callbacks on-change-content .... >>> ")
                                          ((:on-change-content callbacks)
                                           (-> contents .first .toString))))

                             (.addJavaScriptHandler
                              inapp-controller
                              .handlerName "onFormatChange"
                              .callback (fn [contents]
                                          (dart:core/print "in callbacks on-format-change .... >>> ")
                                          (dart:core/print contents)
                                        ;; ((:on-change-content callbacks)
                                        ;;  (-> contents .first .toString))
                                          ))
                             nil)

         .initialOptions (webview/InAppWebViewGroupOptions
                          .crossPlatform (webview/InAppWebViewOptions
                                          .javaScriptEnabled true
                                          .transparentBackground true
                                          .useShouldOverrideUrlLoading true)
                          .android (webview/AndroidInAppWebViewOptions
                                    .useHybridComposition (or (:androidUseHybridComposition editor-options) true)
                                    .loadWithOverviewMode true)
                          .ios (webview/IOSInAppWebViewOptions
                                .allowsInlineMediaPlayback true))
    ;; .initialUserScrip ts (:mobile-initial-scripts editor-options)
    ;; .contextMenu (:context-menu editor-options)
         .onConsoleMessage  (fn [_controller message]
                              (dart:core/print (str (.message message))))
         .onWindowFocus (fn [_controller]
                          (if (and (:should-ensure-visible editor-options)
                                   (some? (.of m/Scrollable ctx)))
                            (let [^m/ScrollableState scrollable (.of m/Scrollable ctx)
                                  ^m/ScrollPosition position (.-position scrollable)]
                              (.ensureVisible position (.findRenderObject ctx))
                              nil)))
         .onLoadStop (fn [^webview/InAppWebViewController inapp-controller uri]
                       (let [url (.toString uri)]
                         (when (.contains url file-path)
                           (dart:core/print "onLoadStop >>>")
                           nil)))))]))))

