(ns simple-editor.widgets.toolbar
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:pointer_interceptor/pointer_interceptor.dart" :as pi]
   ["package:dropdown_button2/src/dropdown_button2.dart" :as dropdown]
   ["package:flutter_inappwebview/flutter_inappwebview.dart" :as webview]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter.alpha2 :as f]
   [simple-editor.controller :as controll]))

(declare toolbar-children
         toogle-buttons)

(defn native-grid-widget [controller enabled options state]
  (f/widget
   (pi/PointerInterceptor)
   (m/AbsorbPointer
    .absorbing (not enabled))
   (m/Opacity
    .opacity (if (true? enabled) 1 0.5))
   (m/Padding
    .padding (.all m/EdgeInsets 5))
   (m/Wrap
;;     .alignment m.Alignment/center
    .crossAxisAlignment m.WrapCrossAlignment/center
    .direction m.Axis/vertical
    .runSpacing (:grid-view-vertical-spacing options)
    .spacing (:grid-view-horizontal-spacing options)
    .children (if (true? (:render-separator-widget options))
                (interpose (m/Padding
                            .padding (.fromLTRB m/EdgeInsets 8 8 8 0)
                            .child
                            (m/Divider
                             .height 10
                             .thickness 1
                             .color m.Colors/grey))
                           (toolbar-children controller options state))
                (toolbar-children controller options state)))))

(defn native-scroll-widget [controller enabled options state]
  (f/widget
   (pi/PointerInterceptor)
   (m/AbsorbPointer
    .absorbing (not enabled))
   (m/Opacity
    .opacity (if (true? enabled) 1 0.5))
   (m/Container
    .width (+ 15 (:toolbar-item-width options)))
;;     (+ 0 (:toolbar-item-width options)))
   (m/Padding
    .padding (.all m/EdgeInsets 5))
   (m/CustomScrollView
    .scrollDirection (.vertical m/Axis)
    .slivers
    [(m/SliverFillRemaining
      .hasScrollBody false
      .child
      (m/Column
       .mainAxisAlignment (.spaceEvenly m/MainAxisAlignment)
       .children
       (if (true? (:render-separator-widget options))
         (interpose (m/Padding
                     .padding (.fromLTRB m/EdgeInsets 8 8 8 0)
                     .child
                     (m/Divider
                      .height 10
                      .thickness 1
                      .color m.Colors/grey))
                    (toolbar-children controller options state))
         (toolbar-children controller options state))))])))

(defn widget
  [controller options callbacks]
  (f/widget
   :let [state (atom {:enabled true
                      :block "p"
                      :font-family "Courier New"
                      :size "16px"
                      :font [false false false false]
                      :misc-font [false false false]})]
   :watch [{:keys [enabled]} state]
   (if (= :native-grid (:toolbar-type options))
     (native-grid-widget controller enabled options state)
     (native-scroll-widget controller enabled options state))))

(defn toolbar-item-container 
  [options child]
  (f/widget
   :context context
   (m/Container
    .padding (.only m/EdgeInsets .top 8)
    .width (:toolbar-item-width options)
    .decoration (if (:render-border options)
                  (or (:dropdown-box-decoration options)
                      (m/BoxDecoration
                       .color (-> m/Theme (.of context) .-scaffoldBackgroundColor)
                       .border (.all m/Border
                                     .color
                                     (-> m/Theme (.of context) .-colorScheme 
                                         .-onSurface
                                         (.withOpacity 0.12))))))
    .child child)))

(defn toolbar-dropdown-button 
  [controller options items state skey]
  (f/widget
   :watch [{selected skey} state]
   (toolbar-item-container
    options
    (m/DropdownButtonHideUnderline
     .child
     (dropdown/DropdownButton2
      .items items
      .value selected
      .onChanged (fn [v]
                   (dart:core/print (str "dropdownbutton onChanged >>>> " (name skey) " " v))
                   (swap! state assoc skey v)
                   (if (= (name skey) "font-family")
                     (controll/set-format @controller "font" "MongolianBaiZheng")
                     (controll/set-format @controller (name skey) (str "'" v "'"))))
      ;; .hint 
      .buttonStyleData
      (dropdown/ButtonStyleData
       .width (:dropdown-button-width options)
       .height (:dropdown-button-height options)
       .padding (:dropdown-button-padding options)
       .elevation 16)
      .dropdownStyleData
      (dropdown/DropdownStyleData
       .maxWidth (:dropdown-style-max-width options)
       .height (:dropdown-style-height options)
         .elevation 16;(:dropdown-button-elevation options)
        ;;  .offset (:dropdown-style-offset options)
       )
      .iconStyleData
      (dropdown/IconStyleData
       .icon (or (:dropdown-icon options)
                 (m/Icon (.keyboard_arrow_right m/Icons)))
       .iconSize (or (:dropdown-icon-size options)
                     12))
      .menuItemStyleData
      (dropdown/MenuItemStyleData
       .width (or (:dropdown-item-width options)
                  32)))))))

(defn toolbar-children
  [controller options state]
  [(toolbar-item-container
    options
    (toolbar-dropdown-button
     controller
     options
     [(m/DropdownMenuItem
       .value "p"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Normal")))
      (m/DropdownMenuItem
       .value "blockquote"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child
               (m/Container
                .decoration (m/BoxDecoration .border
                                             (m/Border .top
                                                       (m/BorderSide .color (.grey m/Colors) .width 3)))
                .padding (.symmetric m/EdgeInsets .horizontal 10)
                .child (mgl/MongolText "Quote"
                                       .style (m/TextStyle .fontFamily "times" .color (.grey m/Colors))))))
      (m/DropdownMenuItem
       .value "h2"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Header 2"
                                      .style (m/TextStyle .fontWeight
                                                          (.bold m/FontWeight) .fontSize 24))))
      (m/DropdownMenuItem
       .value "h3"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Header 3"
                                      .style (m/TextStyle .fontWeight
                                                          (.bold m/FontWeight) .fontSize 18))))
      (m/DropdownMenuItem
       .value "h4"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Header 4"
                                      .style (m/TextStyle .fontWeight
                                                          (.bold m/FontWeight) .fontSize 16))))
      (m/DropdownMenuItem
       .value "h5"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Header 5"
                                      .style (m/TextStyle .fontWeight
                                                          (.bold m/FontWeight) .fontSize 13))))
      (m/DropdownMenuItem
       .value "h6"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText "Header 6"
                                      .style (m/TextStyle .fontWeight
                                                          (.bold m/FontWeight) .fontSize 11))))]
     state :block))
   (toolbar-item-container
    options
    (toolbar-dropdown-button
     controller
     options
     [(m/DropdownMenuItem
       .value "Courier New"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "Courier New"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "sans-serif"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "Sans Serif"
                       .style (m/TextStyle .fontFamily "sans-serif"))))
      (m/DropdownMenuItem
       .value "Times New Roman"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "Times New Roman"
                       .style (m/TextStyle .fontFamily "Times"))))]
     state :font-family))
   (toolbar-item-container
    options
    (toolbar-dropdown-button
     controller
     options
     [(m/DropdownMenuItem
       .value "11px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "11 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "13px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "13 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "16px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "16 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "19px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "19 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "24px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "24 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      (m/DropdownMenuItem
       .value "32px"
       .alignment m.AlignmentDirectional/topCenter
       .child (pi/PointerInterceptor
               .child (mgl/MongolText
                       "32 px"
                       .style (m/TextStyle .fontFamily "Courier"))))
      ]
     state :size))
   (toggle-buttons
    controller
    options state :font [(m/Icon (.format_bold m/Icons))
                         (m/Icon (.format_italic m/Icons))
                         (m/Icon (.format_underline m/Icons))
                         (m/Icon (.format_clear m/Icons))])
   (toggle-buttons
    controller
    options state :misc-font [(m/Icon (.format_strikethrough m/Icons))
                              (m/Icon (.superscript m/Icons))
                              (m/Icon (.subscript m/Icons))])
   ])

(defn toggle-buttons 
  [controller options state skey group-items]
  (f/widget
   :watch [{params skey} state]
   (m/ToggleButtons
    .direction m.Axis/vertical
    .constraints
    (.tightFor m/BoxConstraints
               .width (- (:toolbar-item-width options) 2)
               .height (- (:toolbar-item-width options) 2))
    .color (:toolbar-button-color options)
    .selectedColor (:toolbar-button-selected-color options)
    .fillColor (:toolbar-button-fill-color options)
    .focusColor (:toolbar-button-focus-color options)
    .highlightColor (:toolbar-button-hightlight-color options)
    .hoverColor (:toolbar-button-hovor-color options)
    .splashColor (:toolbar-button-splash-color options)
    .selectedBorderColor (:toolbar-button-selected-border-color options)
    .borderColor (:toolbar-button-border-color options)
    .borderRadius (:toolbar-button-border-radius options)
    .borderWidth (:toolbar-button-border-width options)
    .renderBorder (or (:toolbar-button-render-border options) false)
    ;; .textStyle (:toolbar-text-style options)
    .onPressed (fn [i]
                 
                 (dart:core/print (str "onPressed >>> " i))
                 (swap! state assoc skey (assoc
                                          (get @state skey)
                                          i
                                          (not
                                           (get-in @state [skey i]))))
                 (dart:core/print (str "state [] = >>> " (name skey) " -- " (get-in @state [skey i])))
                 (let [value (get-in @state [skey i])
                       inapp-controller @controller] 
                   (if (nil? @controller)
                     (dart:core/print "onPressed >>>  got nil value")
                     (await
                      (controll/set-format
                       inapp-controller
                       (condp = (name skey)
                         "font"
                         (condp = i
                           0 "bold"
                           1 "italic"
                           2 "underline"
                           3 "strike")

                         "misc-font"
                         (condp = i
                           0 "strike"))
                ;;     (name skey)
                       (if (true? value) "true" "false")))))
                 )
    .isSelected params 
    .children group-items)))

